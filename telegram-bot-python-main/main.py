import os
import telebot
import threading
import time
import logging
from datetime import datetime
from telebot.types import InputMediaPhoto
from dotenv import load_dotenv

# Carregar vari√°veis do ambiente do Railway
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # ID do canal p√∫blico de gera√ß√£o de desejo
ADMIN_ID_1 = os.getenv("ADMIN_ID_1")  # ID da conta dos EUA
ADMIN_ID_2 = os.getenv("ADMIN_ID_2")  # ID da conta do Brasil
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")  # Canal privado para logs do admin

bot = telebot.TeleBot(TOKEN)

# Mensagens do Railway
AUTOMATIC_MESSAGE = os.getenv("AUTOMATIC_MESSAGE")
WELCOME_MESSAGE = os.getenv("WELCOME_MESSAGE")
VIP_BENEFITS = os.getenv("VIP_BENEFITS")
CHECKOUT_MESSAGE = os.getenv("CHECKOUT_MESSAGE")

# Lista para armazenar os usu√°rios que interagiram com o bot
users = set()
last_auto_message_time = None  # Para armazenar a √∫ltima vez que a mensagem autom√°tica foi enviada

# Configurar logging para salvar conversas
logging.basicConfig(
    filename="bot_interactions.log",
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
    encoding="utf-8",
)

# Fun√ß√£o para registrar mensagens no log
def log_message(user_id, user_name, text):
    log_entry = f"User {user_name} ({user_id}): {text}"
    logging.info(log_entry)
    bot.send_message(LOG_CHANNEL_ID, log_entry)  # Enviar log para canal privado do admin

# Fun√ß√£o para enviar mensagem autom√°tica no canal √†s 12h e 00h
def scheduled_broadcast():
    global last_auto_message_time
    while True:
        now = datetime.now()
        if now.hour in [12, 0] and (last_auto_message_time is None or last_auto_message_time.date() != now.date()):
            bot.send_message(CHANNEL_ID, AUTOMATIC_MESSAGE)
            bot.send_message(LOG_CHANNEL_ID, "üì¢ Mensagem autom√°tica enviada ao canal.")
            last_auto_message_time = now  # Atualiza o hor√°rio do √∫ltimo envio
        time.sleep(60)  # Verifica a cada minuto

# Iniciar a thread para envio autom√°tico no canal
threading.Thread(target=scheduled_broadcast, daemon=True).start()

# Comando /start para organizar as mensagens corretamente
@bot.message_handler(commands=["start"])
def send_checkout(message):
    user_id = message.chat.id
    user_name = message.from_user.first_name  # Obt√©m o nome do usu√°rio
    
    # Verifica se o usu√°rio √© administrador
    if str(user_id) in [ADMIN_ID_1, ADMIN_ID_2]:
        bot.send_message(user_id, "‚úÖ Voc√™ est√° autenticado como ADMIN.")
    else:
        users.add(user_id)  # Adiciona o usu√°rio √† lista de notifica√ß√µes futuras
        log_message(user_id, user_name, "/start")  # Registra a intera√ß√£o
        
        # Envia notifica√ß√£o ao administrador sobre um novo usu√°rio
        bot.send_message(ADMIN_ID_1, f"üìå Novo usu√°rio interagiu!\nüÜî ID: {user_id}\nüë§ Nome: {user_name}")

        # Envia a mensagem de boas-vindas
        bot.send_message(user_id, WELCOME_MESSAGE)

        # Envia os benef√≠cios do VIP em um bloco separado
        bot.send_message(user_id, VIP_BENEFITS)

        # Aguarda 2 segundos antes de enviar o checkout
        time.sleep(2)

        # Envia o checkout
        bot.send_message(user_id, CHECKOUT_MESSAGE)

        # Solicita envio do comprovante
        bot.send_message(user_id, "üí≥ Envie o comprovante de pagamento aqui para valida√ß√£o.")

# Comando /broadcast para enviar mensagem no canal
@bot.message_handler(commands=["broadcast"])
def send_broadcast(message):
    if str(message.chat.id) in [ADMIN_ID_1, ADMIN_ID_2]:
        text = message.text.replace("/broadcast", "").strip()
        
        if text:
            bot.send_message(CHANNEL_ID, text)
            bot.send_message(LOG_CHANNEL_ID, "üì¢ Mensagem de texto enviada ao canal.")
        else:
            bot.send_message(message.chat.id, "‚ö† Erro: Envie a mensagem no formato `/broadcast <texto>` ou envie uma **foto/v√≠deo** com legenda.")
    else:
        bot.send_message(message.chat.id, "‚õî Voc√™ n√£o tem permiss√£o para usar este comando.")

# Fun√ß√£o para processar m√≠dia (foto ou v√≠deo) enviada pelo admin
@bot.message_handler(content_types=["photo", "video"])
def broadcast_media(message):
    if str(message.chat.id) in [ADMIN_ID_1, ADMIN_ID_2]:
        caption = message.caption if message.caption else "üì¢ Nova atualiza√ß√£o!"
        
        # Se for foto
        if message.photo:
            bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=caption)
            bot.send_message(LOG_CHANNEL_ID, "üì∏ Foto enviada ao canal.")
        
        # Se for v√≠deo
        elif message.video:
            bot.send_video(CHANNEL_ID, message.video.file_id, caption=caption)
            bot.send_message(LOG_CHANNEL_ID, "üé• V√≠deo enviado ao canal.")

        bot.send_message(message.chat.id, "‚úÖ M√≠dia enviada com sucesso!")
    else:
        bot.send_message(message.chat.id, "‚õî Voc√™ n√£o tem permiss√£o para usar este comando.")

# Comando /me para exibir informa√ß√µes do administrador
@bot.message_handler(commands=["me"])
def admin_info(message):
    if str(message.chat.id) in [ADMIN_ID_1, ADMIN_ID_2]:
        bot.send_message(message.chat.id, f"üìä ID do ADMIN: {message.chat.id}\nüõ† Comandos dispon√≠veis:\n"
                                          "/me - Informa√ß√µes do admin\n"
                                          "/broadcast - Enviar mensagem no canal\n"
                                          "/status - Ver estat√≠sticas\n"
                                          "/forcar_mensagem - Enviar mensagem autom√°tica manualmente")
    else:
        bot.send_message(message.chat.id, "‚õî Voc√™ n√£o tem permiss√£o para acessar este comando.")

# Comando /status para ver estat√≠sticas do bot
@bot.message_handler(commands=["status"])
def bot_status(message):
    if str(message.chat.id) in [ADMIN_ID_1, ADMIN_ID_2]:
        total_users = len(users)
        bot.send_message(message.chat.id, f"üìä Status do Bot:\nüë• Usu√°rios registrados: {total_users}\nüì¢ √öltima mensagem autom√°tica: {last_auto_message_time}")
    else:
        bot.send_message(message.chat.id, "‚õî Voc√™ n√£o tem permiss√£o para ver essas informa√ß√µes.")

# Comando /forcar_mensagem para enviar mensagem autom√°tica no canal imediatamente
@bot.message_handler(commands=["forcar_mensagem"])
def force_send_message(message):
    if str(message.chat.id) in [ADMIN_ID_1, ADMIN_ID_2]:
        bot.send_message(CHANNEL_ID, AUTOMATIC_MESSAGE)
        bot.send_message(message.chat.id, "‚úÖ Mensagem autom√°tica enviada ao canal.")
    else:
        bot.send_message(message.chat.id, "‚õî Voc√™ n√£o tem permiss√£o para usar este comando.")

# Mant√©m o bot rodando
bot.polling()
